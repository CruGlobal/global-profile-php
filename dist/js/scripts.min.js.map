{"version":3,"sources":["angular-growl.js"],"names":[],"mappings":"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","file":"scripts.min.js","sourcesContent":["/**\n * angular-growl-v2 - v0.7.4 - 2015-06-17\n * http://janstevens.github.io/angular-growl-2\n * Copyright (c) 2015 Marco Rinck,Jan Stevens; Licensed MIT\n */\nangular.module('angular-growl', []);\nangular.module('angular-growl').directive('growl', [function () {\n    'use strict';\n    return {\n      restrict: 'A',\n      templateUrl: 'templates/growl/growl.html',\n      replace: false,\n      scope: {\n        reference: '@',\n        inline: '=',\n        limitMessages: '='\n      },\n      controller: [\n        '$scope',\n        '$timeout',\n        'growl',\n        'growlMessages',\n        function ($scope, $timeout, growl, growlMessages) {\n          $scope.referenceId = $scope.reference || 0;\n          growlMessages.initDirective($scope.referenceId, $scope.limitMessages);\n          $scope.growlMessages = growlMessages;\n          $scope.inlineMessage = angular.isDefined($scope.inline) ? $scope.inline : growl.inlineMessages();\n          $scope.$watch('limitMessages', function (limitMessages) {\n            var directive = growlMessages.directives[$scope.referenceId];\n            if (!angular.isUndefined(limitMessages) && !angular.isUndefined(directive)) {\n              directive.limitMessages = limitMessages;\n            }\n          });\n          $scope.stopTimeoutClose = function (message) {\n            if (!message.clickToClose) {\n              angular.forEach(message.promises, function (promise) {\n                $timeout.cancel(promise);\n              });\n              if (message.close) {\n                growlMessages.deleteMessage(message);\n              } else {\n                message.close = true;\n              }\n            }\n          };\n          $scope.alertClasses = function (message) {\n            return {\n              'alert-success': message.severity === 'success',\n              'alert-error': message.severity === 'error',\n              'alert-danger': message.severity === 'error',\n              'alert-info': message.severity === 'info',\n              'alert-warning': message.severity === 'warning',\n              'icon': message.disableIcons === false,\n              'alert-dismissable': !message.disableCloseButton\n            };\n          };\n          $scope.showCountDown = function (message) {\n            return !message.disableCountDown && message.ttl > 0;\n          };\n          $scope.wrapperClasses = function () {\n            var classes = {};\n            classes['growl-fixed'] = !$scope.inlineMessage;\n            classes[growl.position()] = true;\n            return classes;\n          };\n          $scope.computeTitle = function (message) {\n            var ret = {\n                'success': 'Success',\n                'error': 'Error',\n                'info': 'Information',\n                'warn': 'Warning'\n              };\n            return ret[message.severity];\n          };\n        }\n      ]\n    };\n  }]);\nangular.module('angular-growl').run([\n  '$templateCache',\n  function ($templateCache) {\n    'use strict';\n    if ($templateCache.get('templates/growl/growl.html') === undefined) {\n      $templateCache.put('templates/growl/growl.html', '<div class=\"growl-container\" ng-class=\"wrapperClasses()\">' + '<div class=\"growl-item alert\" ng-repeat=\"message in growlMessages.directives[referenceId].messages\" ng-class=\"alertClasses(message)\" ng-click=\"stopTimeoutClose(message)\">' + '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\" ng-click=\"growlMessages.deleteMessage(message)\" ng-show=\"!message.disableCloseButton\">&times;</button>' + '<button type=\"button\" class=\"close\" aria-hidden=\"true\" ng-show=\"showCountDown(message)\">{{message.countdown}}</button>' + '<h4 class=\"growl-title\" ng-show=\"message.title\" ng-bind=\"message.title\"></h4>' + '<div class=\"growl-message\" ng-bind-html=\"message.text\"></div>' + '</div>' + '</div>');\n    }\n  }\n]);\nangular.module('angular-growl').provider('growl', function () {\n  'use strict';\n  var _ttl = {\n      success: null,\n      error: null,\n      warning: null,\n      info: null\n    }, _messagesKey = 'messages', _messageTextKey = 'text', _messageTitleKey = 'title', _messageSeverityKey = 'severity', _onlyUniqueMessages = true, _messageVariableKey = 'variables', _referenceId = 0, _inline = false, _position = 'top-right', _disableCloseButton = false, _disableIcons = false, _reverseOrder = false, _disableCountDown = false, _translateMessages = true;\n  this.globalTimeToLive = function (ttl) {\n    if (typeof ttl === 'object') {\n      for (var k in ttl) {\n        if (ttl.hasOwnProperty(k)) {\n          _ttl[k] = ttl[k];\n        }\n      }\n    } else {\n      for (var severity in _ttl) {\n        if (_ttl.hasOwnProperty(severity)) {\n          _ttl[severity] = ttl;\n        }\n      }\n    }\n    return this;\n  };\n  this.globalTranslateMessages = function (translateMessages) {\n    _translateMessages = translateMessages;\n    return this;\n  };\n  this.globalDisableCloseButton = function (disableCloseButton) {\n    _disableCloseButton = disableCloseButton;\n    return this;\n  };\n  this.globalDisableIcons = function (disableIcons) {\n    _disableIcons = disableIcons;\n    return this;\n  };\n  this.globalReversedOrder = function (reverseOrder) {\n    _reverseOrder = reverseOrder;\n    return this;\n  };\n  this.globalDisableCountDown = function (countDown) {\n    _disableCountDown = countDown;\n    return this;\n  };\n  this.messageVariableKey = function (messageVariableKey) {\n    _messageVariableKey = messageVariableKey;\n    return this;\n  };\n  this.globalInlineMessages = function (inline) {\n    _inline = inline;\n    return this;\n  };\n  this.globalPosition = function (position) {\n    _position = position;\n    return this;\n  };\n  this.messagesKey = function (messagesKey) {\n    _messagesKey = messagesKey;\n    return this;\n  };\n  this.messageTextKey = function (messageTextKey) {\n    _messageTextKey = messageTextKey;\n    return this;\n  };\n  this.messageTitleKey = function (messageTitleKey) {\n    _messageTitleKey = messageTitleKey;\n    return this;\n  };\n  this.messageSeverityKey = function (messageSeverityKey) {\n    _messageSeverityKey = messageSeverityKey;\n    return this;\n  };\n  this.onlyUniqueMessages = function (onlyUniqueMessages) {\n    _onlyUniqueMessages = onlyUniqueMessages;\n    return this;\n  };\n  this.serverMessagesInterceptor = [\n    '$q',\n    'growl',\n    function ($q, growl) {\n      function checkResponse(response) {\n        if (response !== undefined && response.data && response.data[_messagesKey] && response.data[_messagesKey].length > 0) {\n          growl.addServerMessages(response.data[_messagesKey]);\n        }\n      }\n      return {\n        'response': function (response) {\n          checkResponse(response);\n          return response;\n        },\n        'responseError': function (rejection) {\n          checkResponse(rejection);\n          return $q.reject(rejection);\n        }\n      };\n    }\n  ];\n  this.$get = [\n    '$rootScope',\n    '$interpolate',\n    '$sce',\n    '$filter',\n    '$timeout',\n    'growlMessages',\n    function ($rootScope, $interpolate, $sce, $filter, $timeout, growlMessages) {\n      var translate;\n      growlMessages.onlyUnique = _onlyUniqueMessages;\n      growlMessages.reverseOrder = _reverseOrder;\n      try {\n        translate = $filter('translate');\n      } catch (e) {\n      }\n      function broadcastMessage(message) {\n        if (translate && message.translateMessage) {\n          message.text = translate(message.text, message.variables) || message.text;\n          message.title = translate(message.title) || message.title;\n        } else {\n          var polation = $interpolate(message.text);\n          message.text = polation(message.variables);\n        }\n        var addedMessage = growlMessages.addMessage(message);\n        $rootScope.$broadcast('growlMessage', message);\n        $timeout(function () {\n        }, 0);\n        return addedMessage;\n      }\n      function sendMessage(text, config, severity) {\n        var _config = config || {}, message;\n        message = {\n          text: text,\n          title: _config.title,\n          severity: severity,\n          ttl: _config.ttl || _ttl[severity],\n          variables: _config.variables || {},\n          disableCloseButton: _config.disableCloseButton === undefined ? _disableCloseButton : _config.disableCloseButton,\n          disableIcons: _config.disableIcons === undefined ? _disableIcons : _config.disableIcons,\n          disableCountDown: _config.disableCountDown === undefined ? _disableCountDown : _config.disableCountDown,\n          position: _config.position || _position,\n          referenceId: _config.referenceId || _referenceId,\n          translateMessage: _config.translateMessage === undefined ? _translateMessages : _config.translateMessage,\n          destroy: function () {\n            growlMessages.deleteMessage(message);\n          },\n          setText: function (newText) {\n            message.text = $sce.trustAsHtml(String(newText));\n          },\n          onclose: _config.onclose,\n          onopen: _config.onopen\n        };\n        return broadcastMessage(message);\n      }\n      function warning(text, config) {\n        return sendMessage(text, config, 'warning');\n      }\n      function error(text, config) {\n        return sendMessage(text, config, 'error');\n      }\n      function info(text, config) {\n        return sendMessage(text, config, 'info');\n      }\n      function success(text, config) {\n        return sendMessage(text, config, 'success');\n      }\n      function general(text, config, severity) {\n        severity = (severity || 'error').toLowerCase();\n        return sendMessage(text, config, severity);\n      }\n      function addServerMessages(messages) {\n        if (!messages || !messages.length) {\n          return;\n        }\n        var i, message, severity, length;\n        length = messages.length;\n        for (i = 0; i < length; i++) {\n          message = messages[i];\n          if (message[_messageTextKey]) {\n            severity = (message[_messageSeverityKey] || 'error').toLowerCase();\n            var config = {};\n            config.variables = message[_messageVariableKey] || {};\n            config.title = message[_messageTitleKey];\n            sendMessage(message[_messageTextKey], config, severity);\n          }\n        }\n      }\n      function onlyUnique() {\n        return _onlyUniqueMessages;\n      }\n      function reverseOrder() {\n        return _reverseOrder;\n      }\n      function inlineMessages() {\n        return _inline;\n      }\n      function position() {\n        return _position;\n      }\n      return {\n        warning: warning,\n        error: error,\n        info: info,\n        success: success,\n        general: general,\n        addServerMessages: addServerMessages,\n        onlyUnique: onlyUnique,\n        reverseOrder: reverseOrder,\n        inlineMessages: inlineMessages,\n        position: position\n      };\n    }\n  ];\n});\nangular.module('angular-growl').service('growlMessages', [\n  '$sce',\n  '$timeout',\n  function ($sce, $timeout) {\n    'use strict';\n    var self = this;\n    this.directives = {};\n    var preloadDirectives = {};\n    function preLoad(referenceId) {\n      var directive;\n      if (preloadDirectives[referenceId]) {\n        directive = preloadDirectives[referenceId];\n      } else {\n        directive = preloadDirectives[referenceId] = { messages: [] };\n      }\n      return directive;\n    }\n    function directiveForRefId(referenceId) {\n      var refId = referenceId || 0;\n      return self.directives[refId] || preloadDirectives[refId];\n    }\n    this.initDirective = function (referenceId, limitMessages) {\n      if (preloadDirectives[referenceId]) {\n        this.directives[referenceId] = preloadDirectives[referenceId];\n        this.directives[referenceId].limitMessages = limitMessages;\n      } else {\n        this.directives[referenceId] = {\n          messages: [],\n          limitMessages: limitMessages\n        };\n      }\n      return this.directives[referenceId];\n    };\n    this.getAllMessages = function (referenceId) {\n      referenceId = referenceId || 0;\n      var messages;\n      if (directiveForRefId(referenceId)) {\n        messages = directiveForRefId(referenceId).messages;\n      } else {\n        messages = [];\n      }\n      return messages;\n    };\n    this.destroyAllMessages = function (referenceId) {\n      var messages = this.getAllMessages(referenceId);\n      for (var i = messages.length - 1; i >= 0; i--) {\n        messages[i].destroy();\n      }\n      var directive = directiveForRefId(referenceId);\n      if (directive) {\n        directive.messages = [];\n      }\n    };\n    this.addMessage = function (message) {\n      var directive, messages, found, msgText;\n      if (this.directives[message.referenceId]) {\n        directive = this.directives[message.referenceId];\n      } else {\n        directive = preLoad(message.referenceId);\n      }\n      messages = directive.messages;\n      if (this.onlyUnique) {\n        angular.forEach(messages, function (msg) {\n          msgText = $sce.getTrustedHtml(msg.text);\n          if (message.text === msgText && message.severity === msg.severity && message.title === msg.title) {\n            found = true;\n          }\n        });\n        if (found) {\n          return;\n        }\n      }\n      message.text = $sce.trustAsHtml(String(message.text));\n      if (message.ttl && message.ttl !== -1) {\n        message.countdown = message.ttl / 1000;\n        message.promises = [];\n        message.close = false;\n        message.countdownFunction = function () {\n          if (message.countdown > 1) {\n            message.countdown--;\n            message.promises.push($timeout(message.countdownFunction, 1000));\n          } else {\n            message.countdown--;\n          }\n        };\n      }\n      if (angular.isDefined(directive.limitMessages)) {\n        var diff = messages.length - (directive.limitMessages - 1);\n        if (diff > 0) {\n          messages.splice(directive.limitMessages - 1, diff);\n        }\n      }\n      if (this.reverseOrder) {\n        messages.unshift(message);\n      } else {\n        messages.push(message);\n      }\n      if (typeof message.onopen === 'function') {\n        message.onopen();\n      }\n      if (message.ttl && message.ttl !== -1) {\n        var self = this;\n        message.promises.push($timeout(angular.bind(this, function () {\n          self.deleteMessage(message);\n        }), message.ttl));\n        message.promises.push($timeout(message.countdownFunction, 1000));\n      }\n      return message;\n    };\n    this.deleteMessage = function (message) {\n      var messages = this.getAllMessages(message.referenceId), index = messages.indexOf(message);\n      if (index > -1) {\n        messages[index].close = true;\n        messages.splice(index, 1);\n      }\n      if (typeof message.onclose === 'function') {\n        message.onclose();\n      }\n    };\n  }\n]);"],"sourceRoot":"/source/"}