{"version":3,"sources":["angular-gettext.js","angular-growl.js"],"names":["angular","module","constant","str","factory","gettextPlurals","$http","$cacheFactory","$interpolate","$rootScope","broadcastUpdated","$broadcast","catalog","noContext","test","isHTMLModified","element","html","prefixDebug","string","debug","currentLanguage","baseLanguage","debugPrefix","addTranslatedMarkers","showTranslatedMarkers","translatedMarkerPrefix","translatedMarkerSuffix","strings","cache","setCurrentLanguage","lang","this","getCurrentLanguage","setStrings","language","key","val","isString","isArray","obj","context","getStringForm","n","stringTable","contexts","plurals","getString","scope","getPlural","stringPlural","form","$count","loadRemote","url","method","success","data","directive","gettextCatalog","$parse","$animate","$compile","$window","assert","condition","missing","found","Error","trim","String","prototype","value","replace","msie","parseInt","exec","lowercase","navigator","userAgent","restrict","terminal","compile","attrs","translatePlural","translateN","msgid","translateContext","slice","post","update","translated","pluralScope","$new","countFn","oldContents","contents","length","linking","newWrapper","newContents","enter","leave","$watch","$on","filter","input","$stateful","langCode","templateUrl","reference","inline","limitMessages","controller","$scope","$timeout","growl","growlMessages","referenceId","initDirective","inlineMessage","isDefined","inlineMessages","directives","isUndefined","stopTimeoutClose","message","clickToClose","forEach","promises","promise","cancel","close","deleteMessage","alertClasses","alert-success","severity","alert-error","alert-danger","alert-info","alert-warning","icon","disableIcons","alert-dismissable","disableCloseButton","showCountDown","disableCountDown","ttl","wrapperClasses","classes","position","computeTitle","ret","error","info","warn","run","$templateCache","undefined","get","put","provider","_ttl","warning","_messagesKey","_messageTextKey","_messageTitleKey","_messageSeverityKey","_onlyUniqueMessages","_messageVariableKey","_referenceId","_inline","_position","_disableCloseButton","_disableIcons","_reverseOrder","_disableCountDown","_translateMessages","globalTimeToLive","k","hasOwnProperty","globalTranslateMessages","translateMessages","globalDisableCloseButton","globalDisableIcons","globalReversedOrder","reverseOrder","globalDisableCountDown","countDown","messageVariableKey","globalInlineMessages","globalPosition","messagesKey","messageTextKey","messageTitleKey","messageSeverityKey","onlyUniqueMessages","serverMessagesInterceptor","$q","checkResponse","response","addServerMessages","responseError","rejection","reject","$get","$sce","$filter","broadcastMessage","translate","translateMessage","text","variables","title","polation","addedMessage","addMessage","sendMessage","config","_config","destroy","setText","newText","trustAsHtml","onclose","onopen","general","toLowerCase","messages","i","onlyUnique","e","service","preLoad","preloadDirectives","directiveForRefId","refId","self","getAllMessages","destroyAllMessages","msgText","msg","getTrustedHtml","countdown","countdownFunction","push","diff","splice","unshift","bind","index","indexOf"],"mappings":"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","file":"scripts.min.js","sourcesContent":["angular.module('gettext', []);\n\nangular.module('gettext').constant('gettext', function (str) {\n    /*\n     * Does nothing, simply returns the input string.\n     *\n     * This function serves as a marker for `grunt-angular-gettext` to know that\n     * this string should be extracted for translations.\n     */\n    return str;\n});\n\nangular.module('gettext').factory('gettextCatalog', [\"gettextPlurals\", \"$http\", \"$cacheFactory\", \"$interpolate\", \"$rootScope\", function (gettextPlurals, $http, $cacheFactory, $interpolate, $rootScope) {\n    var catalog;\n    var noContext = '$$noContext';\n\n    // IE8 returns UPPER CASE tags, even though the source is lower case.\n    // This can causes the (key) string in the DOM to have a different case to\n    // the string in the `po` files.\n    // IE9, IE10 and IE11 reorders the attributes of tags.\n    var test = '<span id=\"test\" title=\"test\" class=\"tested\">test</span>';\n    var isHTMLModified = (angular.element('<span>' + test + '</span>').html() !== test);\n\n    var prefixDebug = function (string) {\n        if (catalog.debug && catalog.currentLanguage !== catalog.baseLanguage) {\n            return catalog.debugPrefix + string;\n        } else {\n            return string;\n        }\n    };\n\n    var addTranslatedMarkers = function (string) {\n        if (catalog.showTranslatedMarkers) {\n            return catalog.translatedMarkerPrefix + string + catalog.translatedMarkerSuffix;\n        } else {\n            return string;\n        }\n    };\n\n    function broadcastUpdated() {\n        $rootScope.$broadcast('gettextLanguageChanged');\n    }\n\n    catalog = {\n        debug: false,\n        debugPrefix: '[MISSING]: ',\n        showTranslatedMarkers: false,\n        translatedMarkerPrefix: '[',\n        translatedMarkerSuffix: ']',\n        strings: {},\n        baseLanguage: 'en',\n        currentLanguage: 'en',\n        cache: $cacheFactory('strings'),\n\n        setCurrentLanguage: function (lang) {\n            this.currentLanguage = lang;\n            broadcastUpdated();\n        },\n\n        getCurrentLanguage: function () {\n            return this.currentLanguage;\n        },\n\n        setStrings: function (language, strings) {\n            if (!this.strings[language]) {\n                this.strings[language] = {};\n            }\n\n            for (var key in strings) {\n                var val = strings[key];\n\n                if (isHTMLModified) {\n                    // Use the DOM engine to render any HTML in the key (#131).\n                    key = angular.element('<span>' + key + '</span>').html();\n                }\n\n                if (angular.isString(val) || angular.isArray(val)) {\n                    // No context, wrap it in $$noContext.\n                    var obj = {};\n                    obj[noContext] = val;\n                    val = obj;\n                }\n\n                // Expand single strings for each context.\n                for (var context in val) {\n                    var str = val[context];\n                    val[context] = angular.isArray(str) ? str : [str];\n                }\n                this.strings[language][key] = val;\n            }\n\n            broadcastUpdated();\n        },\n\n        getStringForm: function (string, n, context) {\n            var stringTable = this.strings[this.currentLanguage] || {};\n            var contexts = stringTable[string] || {};\n            var plurals = contexts[context || noContext] || [];\n            return plurals[n];\n        },\n\n        getString: function (string, scope, context) {\n            string = this.getStringForm(string, 0, context) || prefixDebug(string);\n            string = scope ? $interpolate(string)(scope) : string;\n            return addTranslatedMarkers(string);\n        },\n\n        getPlural: function (n, string, stringPlural, scope, context) {\n            var form = gettextPlurals(this.currentLanguage, n);\n            string = this.getStringForm(string, form, context) || prefixDebug(n === 1 ? string : stringPlural);\n            if (scope) {\n                scope.$count = n;\n                string = $interpolate(string)(scope);\n            }\n            return addTranslatedMarkers(string);\n        },\n\n        loadRemote: function (url) {\n            return $http({\n                method: 'GET',\n                url: url,\n                cache: catalog.cache\n            }).success(function (data) {\n                for (var lang in data) {\n                    catalog.setStrings(lang, data[lang]);\n                }\n            });\n        }\n    };\n\n    return catalog;\n}]);\n\nangular.module('gettext').directive('translate', [\"gettextCatalog\", \"$parse\", \"$animate\", \"$compile\", \"$window\", function (gettextCatalog, $parse, $animate, $compile, $window) {\n    // Trim polyfill for old browsers (instead of jQuery)\n    // Based on AngularJS-v1.2.2 (angular.js#620)\n    var trim = (function () {\n        if (!String.prototype.trim) {\n            return function (value) {\n                return (typeof value === 'string') ? value.replace(/^\\s*/, '').replace(/\\s*$/, '') : value;\n            };\n        }\n        return function (value) {\n            return (typeof value === 'string') ? value.trim() : value;\n        };\n    })();\n\n    function assert(condition, missing, found) {\n        if (!condition) {\n            throw new Error('You should add a ' + missing + ' attribute whenever you add a ' + found + ' attribute.');\n        }\n    }\n\n    var msie = parseInt((/msie (\\d+)/.exec(angular.lowercase($window.navigator.userAgent)) || [])[1], 10);\n\n    return {\n        restrict: 'AE',\n        terminal: true,\n        compile: function compile(element, attrs) {\n            // Validate attributes\n            assert(!attrs.translatePlural || attrs.translateN, 'translate-n', 'translate-plural');\n            assert(!attrs.translateN || attrs.translatePlural, 'translate-plural', 'translate-n');\n\n            var msgid = trim(element.html());\n            var translatePlural = attrs.translatePlural;\n            var translateContext = attrs.translateContext;\n\n            if (msie <= 8) {\n                // Workaround fix relating to angular adding a comment node to\n                // anchors. angular/angular.js/#1949 / angular/angular.js/#2013\n                if (msgid.slice(-13) === '<!--IE fix-->') {\n                    msgid = msgid.slice(0, -13);\n                }\n            }\n\n            return {\n                post: function (scope, element, attrs) {\n                    var countFn = $parse(attrs.translateN);\n                    var pluralScope = null;\n                    var linking = true;\n\n                    function update() {\n                        // Fetch correct translated string.\n                        var translated;\n                        if (translatePlural) {\n                            scope = pluralScope || (pluralScope = scope.$new());\n                            scope.$count = countFn(scope);\n                            translated = gettextCatalog.getPlural(scope.$count, msgid, translatePlural, null, translateContext);\n                        } else {\n                            translated = gettextCatalog.getString(msgid,  null, translateContext);\n                        }\n\n                        var oldContents = element.contents();\n\n                        if (oldContents.length === 0){\n                            return;\n                        }\n\n                        // Avoid redundant swaps\n                        if (translated === trim(oldContents.html())){\n                            // Take care of unlinked content\n                            if (linking){\n                                $compile(oldContents)(scope);\n                            }\n                            return;\n                        }\n\n                        // Swap in the translation\n                        var newWrapper = angular.element('<span>' + translated + '</span>');\n                        $compile(newWrapper.contents())(scope);\n                        var newContents = newWrapper.contents();\n\n                        $animate.enter(newContents, element);\n                        $animate.leave(oldContents);\n                    }\n\n                    if (attrs.translateN) {\n                        scope.$watch(attrs.translateN, update);\n                    }\n\n                    scope.$on('gettextLanguageChanged', update);\n\n                    update();\n                    linking = false;\n                }\n            };\n        }\n    };\n}]);\n\nangular.module('gettext').filter('translate', [\"gettextCatalog\", function (gettextCatalog) {\n    function filter(input, context) {\n        return gettextCatalog.getString(input, null, context);\n    }\n    filter.$stateful = true;\n    return filter;\n}]);\n\n// Do not edit this file, it is autogenerated using genplurals.py!\nangular.module(\"gettext\").factory(\"gettextPlurals\", function () {\n    return function (langCode, n) {\n        switch (langCode) {\n            case \"ay\":  // Aymará\n            case \"bo\":  // Tibetan\n            case \"cgg\": // Chiga\n            case \"dz\":  // Dzongkha\n            case \"fa\":  // Persian\n            case \"id\":  // Indonesian\n            case \"ja\":  // Japanese\n            case \"jbo\": // Lojban\n            case \"ka\":  // Georgian\n            case \"kk\":  // Kazakh\n            case \"km\":  // Khmer\n            case \"ko\":  // Korean\n            case \"ky\":  // Kyrgyz\n            case \"lo\":  // Lao\n            case \"ms\":  // Malay\n            case \"my\":  // Burmese\n            case \"sah\": // Yakut\n            case \"su\":  // Sundanese\n            case \"th\":  // Thai\n            case \"tt\":  // Tatar\n            case \"ug\":  // Uyghur\n            case \"vi\":  // Vietnamese\n            case \"wo\":  // Wolof\n            case \"zh\":  // Chinese\n                // 1 form\n                return 0;\n            case \"is\":  // Icelandic\n                // 2 forms\n                return (n%10!=1 || n%100==11) ? 1 : 0;\n            case \"jv\":  // Javanese\n                // 2 forms\n                return n!=0 ? 1 : 0;\n            case \"mk\":  // Macedonian\n                // 2 forms\n                return n==1 || n%10==1 ? 0 : 1;\n            case \"ach\": // Acholi\n            case \"ak\":  // Akan\n            case \"am\":  // Amharic\n            case \"arn\": // Mapudungun\n            case \"br\":  // Breton\n            case \"fil\": // Filipino\n            case \"fr\":  // French\n            case \"gun\": // Gun\n            case \"ln\":  // Lingala\n            case \"mfe\": // Mauritian Creole\n            case \"mg\":  // Malagasy\n            case \"mi\":  // Maori\n            case \"oc\":  // Occitan\n            case \"pt_BR\":  // Brazilian Portuguese\n            case \"tg\":  // Tajik\n            case \"ti\":  // Tigrinya\n            case \"tr\":  // Turkish\n            case \"uz\":  // Uzbek\n            case \"wa\":  // Walloon\n            case \"zh\":  // Chinese\n                // 2 forms\n                return n>1 ? 1 : 0;\n            case \"lv\":  // Latvian\n                // 3 forms\n                return (n%10==1 && n%100!=11 ? 0 : n != 0 ? 1 : 2);\n            case \"lt\":  // Lithuanian\n                // 3 forms\n                return (n%10==1 && n%100!=11 ? 0 : n%10>=2 && (n%100<10 || n%100>=20) ? 1 : 2);\n            case \"be\":  // Belarusian\n            case \"bs\":  // Bosnian\n            case \"hr\":  // Croatian\n            case \"ru\":  // Russian\n            case \"sr\":  // Serbian\n            case \"uk\":  // Ukrainian\n                // 3 forms\n                return (n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n            case \"mnk\": // Mandinka\n                // 3 forms\n                return (n==0 ? 0 : n==1 ? 1 : 2);\n            case \"ro\":  // Romanian\n                // 3 forms\n                return (n==1 ? 0 : (n==0 || (n%100 > 0 && n%100 < 20)) ? 1 : 2);\n            case \"pl\":  // Polish\n                // 3 forms\n                return (n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n            case \"cs\":  // Czech\n            case \"sk\":  // Slovak\n                // 3 forms\n                return (n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2;\n            case \"sl\":  // Slovenian\n                // 4 forms\n                return (n%100==1 ? 1 : n%100==2 ? 2 : n%100==3 || n%100==4 ? 3 : 0);\n            case \"mt\":  // Maltese\n                // 4 forms\n                return (n==1 ? 0 : n==0 || ( n%100>1 && n%100<11) ? 1 : (n%100>10 && n%100<20 ) ? 2 : 3);\n            case \"gd\":  // Scottish Gaelic\n                // 4 forms\n                return (n==1 || n==11) ? 0 : (n==2 || n==12) ? 1 : (n > 2 && n < 20) ? 2 : 3;\n            case \"cy\":  // Welsh\n                // 4 forms\n                return (n==1) ? 0 : (n==2) ? 1 : (n != 8 && n != 11) ? 2 : 3;\n            case \"kw\":  // Cornish\n                // 4 forms\n                return (n==1) ? 0 : (n==2) ? 1 : (n == 3) ? 2 : 3;\n            case \"ga\":  // Irish\n                // 5 forms\n                return n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : 4;\n            case \"ar\":  // Arabic\n                // 6 forms\n                return (n==0 ? 0 : n==1 ? 1 : n==2 ? 2 : n%100>=3 && n%100<=10 ? 3 : n%100>=11 ? 4 : 5);\n            default: // Everything else\n                return n != 1 ? 1 : 0;\n        }\n    }\n});\n","/**\n * angular-growl-v2 - v0.7.4 - 2015-06-17\n * http://janstevens.github.io/angular-growl-2\n * Copyright (c) 2015 Marco Rinck,Jan Stevens; Licensed MIT\n */\nangular.module('angular-growl', []);\nangular.module('angular-growl').directive('growl', [function () {\n    'use strict';\n    return {\n      restrict: 'A',\n      templateUrl: 'templates/growl/growl.html',\n      replace: false,\n      scope: {\n        reference: '@',\n        inline: '=',\n        limitMessages: '='\n      },\n      controller: [\n        '$scope',\n        '$timeout',\n        'growl',\n        'growlMessages',\n        function ($scope, $timeout, growl, growlMessages) {\n          $scope.referenceId = $scope.reference || 0;\n          growlMessages.initDirective($scope.referenceId, $scope.limitMessages);\n          $scope.growlMessages = growlMessages;\n          $scope.inlineMessage = angular.isDefined($scope.inline) ? $scope.inline : growl.inlineMessages();\n          $scope.$watch('limitMessages', function (limitMessages) {\n            var directive = growlMessages.directives[$scope.referenceId];\n            if (!angular.isUndefined(limitMessages) && !angular.isUndefined(directive)) {\n              directive.limitMessages = limitMessages;\n            }\n          });\n          $scope.stopTimeoutClose = function (message) {\n            if (!message.clickToClose) {\n              angular.forEach(message.promises, function (promise) {\n                $timeout.cancel(promise);\n              });\n              if (message.close) {\n                growlMessages.deleteMessage(message);\n              } else {\n                message.close = true;\n              }\n            }\n          };\n          $scope.alertClasses = function (message) {\n            return {\n              'alert-success': message.severity === 'success',\n              'alert-error': message.severity === 'error',\n              'alert-danger': message.severity === 'error',\n              'alert-info': message.severity === 'info',\n              'alert-warning': message.severity === 'warning',\n              'icon': message.disableIcons === false,\n              'alert-dismissable': !message.disableCloseButton\n            };\n          };\n          $scope.showCountDown = function (message) {\n            return !message.disableCountDown && message.ttl > 0;\n          };\n          $scope.wrapperClasses = function () {\n            var classes = {};\n            classes['growl-fixed'] = !$scope.inlineMessage;\n            classes[growl.position()] = true;\n            return classes;\n          };\n          $scope.computeTitle = function (message) {\n            var ret = {\n                'success': 'Success',\n                'error': 'Error',\n                'info': 'Information',\n                'warn': 'Warning'\n              };\n            return ret[message.severity];\n          };\n        }\n      ]\n    };\n  }]);\nangular.module('angular-growl').run([\n  '$templateCache',\n  function ($templateCache) {\n    'use strict';\n    if ($templateCache.get('templates/growl/growl.html') === undefined) {\n      $templateCache.put('templates/growl/growl.html', '<div class=\"growl-container\" ng-class=\"wrapperClasses()\">' + '<div class=\"growl-item alert\" ng-repeat=\"message in growlMessages.directives[referenceId].messages\" ng-class=\"alertClasses(message)\" ng-click=\"stopTimeoutClose(message)\">' + '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\" ng-click=\"growlMessages.deleteMessage(message)\" ng-show=\"!message.disableCloseButton\">&times;</button>' + '<button type=\"button\" class=\"close\" aria-hidden=\"true\" ng-show=\"showCountDown(message)\">{{message.countdown}}</button>' + '<h4 class=\"growl-title\" ng-show=\"message.title\" ng-bind=\"message.title\"></h4>' + '<div class=\"growl-message\" ng-bind-html=\"message.text\"></div>' + '</div>' + '</div>');\n    }\n  }\n]);\nangular.module('angular-growl').provider('growl', function () {\n  'use strict';\n  var _ttl = {\n      success: null,\n      error: null,\n      warning: null,\n      info: null\n    }, _messagesKey = 'messages', _messageTextKey = 'text', _messageTitleKey = 'title', _messageSeverityKey = 'severity', _onlyUniqueMessages = true, _messageVariableKey = 'variables', _referenceId = 0, _inline = false, _position = 'top-right', _disableCloseButton = false, _disableIcons = false, _reverseOrder = false, _disableCountDown = false, _translateMessages = true;\n  this.globalTimeToLive = function (ttl) {\n    if (typeof ttl === 'object') {\n      for (var k in ttl) {\n        if (ttl.hasOwnProperty(k)) {\n          _ttl[k] = ttl[k];\n        }\n      }\n    } else {\n      for (var severity in _ttl) {\n        if (_ttl.hasOwnProperty(severity)) {\n          _ttl[severity] = ttl;\n        }\n      }\n    }\n    return this;\n  };\n  this.globalTranslateMessages = function (translateMessages) {\n    _translateMessages = translateMessages;\n    return this;\n  };\n  this.globalDisableCloseButton = function (disableCloseButton) {\n    _disableCloseButton = disableCloseButton;\n    return this;\n  };\n  this.globalDisableIcons = function (disableIcons) {\n    _disableIcons = disableIcons;\n    return this;\n  };\n  this.globalReversedOrder = function (reverseOrder) {\n    _reverseOrder = reverseOrder;\n    return this;\n  };\n  this.globalDisableCountDown = function (countDown) {\n    _disableCountDown = countDown;\n    return this;\n  };\n  this.messageVariableKey = function (messageVariableKey) {\n    _messageVariableKey = messageVariableKey;\n    return this;\n  };\n  this.globalInlineMessages = function (inline) {\n    _inline = inline;\n    return this;\n  };\n  this.globalPosition = function (position) {\n    _position = position;\n    return this;\n  };\n  this.messagesKey = function (messagesKey) {\n    _messagesKey = messagesKey;\n    return this;\n  };\n  this.messageTextKey = function (messageTextKey) {\n    _messageTextKey = messageTextKey;\n    return this;\n  };\n  this.messageTitleKey = function (messageTitleKey) {\n    _messageTitleKey = messageTitleKey;\n    return this;\n  };\n  this.messageSeverityKey = function (messageSeverityKey) {\n    _messageSeverityKey = messageSeverityKey;\n    return this;\n  };\n  this.onlyUniqueMessages = function (onlyUniqueMessages) {\n    _onlyUniqueMessages = onlyUniqueMessages;\n    return this;\n  };\n  this.serverMessagesInterceptor = [\n    '$q',\n    'growl',\n    function ($q, growl) {\n      function checkResponse(response) {\n        if (response !== undefined && response.data && response.data[_messagesKey] && response.data[_messagesKey].length > 0) {\n          growl.addServerMessages(response.data[_messagesKey]);\n        }\n      }\n      return {\n        'response': function (response) {\n          checkResponse(response);\n          return response;\n        },\n        'responseError': function (rejection) {\n          checkResponse(rejection);\n          return $q.reject(rejection);\n        }\n      };\n    }\n  ];\n  this.$get = [\n    '$rootScope',\n    '$interpolate',\n    '$sce',\n    '$filter',\n    '$timeout',\n    'growlMessages',\n    function ($rootScope, $interpolate, $sce, $filter, $timeout, growlMessages) {\n      var translate;\n      growlMessages.onlyUnique = _onlyUniqueMessages;\n      growlMessages.reverseOrder = _reverseOrder;\n      try {\n        translate = $filter('translate');\n      } catch (e) {\n      }\n      function broadcastMessage(message) {\n        if (translate && message.translateMessage) {\n          message.text = translate(message.text, message.variables) || message.text;\n          message.title = translate(message.title) || message.title;\n        } else {\n          var polation = $interpolate(message.text);\n          message.text = polation(message.variables);\n        }\n        var addedMessage = growlMessages.addMessage(message);\n        $rootScope.$broadcast('growlMessage', message);\n        $timeout(function () {\n        }, 0);\n        return addedMessage;\n      }\n      function sendMessage(text, config, severity) {\n        var _config = config || {}, message;\n        message = {\n          text: text,\n          title: _config.title,\n          severity: severity,\n          ttl: _config.ttl || _ttl[severity],\n          variables: _config.variables || {},\n          disableCloseButton: _config.disableCloseButton === undefined ? _disableCloseButton : _config.disableCloseButton,\n          disableIcons: _config.disableIcons === undefined ? _disableIcons : _config.disableIcons,\n          disableCountDown: _config.disableCountDown === undefined ? _disableCountDown : _config.disableCountDown,\n          position: _config.position || _position,\n          referenceId: _config.referenceId || _referenceId,\n          translateMessage: _config.translateMessage === undefined ? _translateMessages : _config.translateMessage,\n          destroy: function () {\n            growlMessages.deleteMessage(message);\n          },\n          setText: function (newText) {\n            message.text = $sce.trustAsHtml(String(newText));\n          },\n          onclose: _config.onclose,\n          onopen: _config.onopen\n        };\n        return broadcastMessage(message);\n      }\n      function warning(text, config) {\n        return sendMessage(text, config, 'warning');\n      }\n      function error(text, config) {\n        return sendMessage(text, config, 'error');\n      }\n      function info(text, config) {\n        return sendMessage(text, config, 'info');\n      }\n      function success(text, config) {\n        return sendMessage(text, config, 'success');\n      }\n      function general(text, config, severity) {\n        severity = (severity || 'error').toLowerCase();\n        return sendMessage(text, config, severity);\n      }\n      function addServerMessages(messages) {\n        if (!messages || !messages.length) {\n          return;\n        }\n        var i, message, severity, length;\n        length = messages.length;\n        for (i = 0; i < length; i++) {\n          message = messages[i];\n          if (message[_messageTextKey]) {\n            severity = (message[_messageSeverityKey] || 'error').toLowerCase();\n            var config = {};\n            config.variables = message[_messageVariableKey] || {};\n            config.title = message[_messageTitleKey];\n            sendMessage(message[_messageTextKey], config, severity);\n          }\n        }\n      }\n      function onlyUnique() {\n        return _onlyUniqueMessages;\n      }\n      function reverseOrder() {\n        return _reverseOrder;\n      }\n      function inlineMessages() {\n        return _inline;\n      }\n      function position() {\n        return _position;\n      }\n      return {\n        warning: warning,\n        error: error,\n        info: info,\n        success: success,\n        general: general,\n        addServerMessages: addServerMessages,\n        onlyUnique: onlyUnique,\n        reverseOrder: reverseOrder,\n        inlineMessages: inlineMessages,\n        position: position\n      };\n    }\n  ];\n});\nangular.module('angular-growl').service('growlMessages', [\n  '$sce',\n  '$timeout',\n  function ($sce, $timeout) {\n    'use strict';\n    var self = this;\n    this.directives = {};\n    var preloadDirectives = {};\n    function preLoad(referenceId) {\n      var directive;\n      if (preloadDirectives[referenceId]) {\n        directive = preloadDirectives[referenceId];\n      } else {\n        directive = preloadDirectives[referenceId] = { messages: [] };\n      }\n      return directive;\n    }\n    function directiveForRefId(referenceId) {\n      var refId = referenceId || 0;\n      return self.directives[refId] || preloadDirectives[refId];\n    }\n    this.initDirective = function (referenceId, limitMessages) {\n      if (preloadDirectives[referenceId]) {\n        this.directives[referenceId] = preloadDirectives[referenceId];\n        this.directives[referenceId].limitMessages = limitMessages;\n      } else {\n        this.directives[referenceId] = {\n          messages: [],\n          limitMessages: limitMessages\n        };\n      }\n      return this.directives[referenceId];\n    };\n    this.getAllMessages = function (referenceId) {\n      referenceId = referenceId || 0;\n      var messages;\n      if (directiveForRefId(referenceId)) {\n        messages = directiveForRefId(referenceId).messages;\n      } else {\n        messages = [];\n      }\n      return messages;\n    };\n    this.destroyAllMessages = function (referenceId) {\n      var messages = this.getAllMessages(referenceId);\n      for (var i = messages.length - 1; i >= 0; i--) {\n        messages[i].destroy();\n      }\n      var directive = directiveForRefId(referenceId);\n      if (directive) {\n        directive.messages = [];\n      }\n    };\n    this.addMessage = function (message) {\n      var directive, messages, found, msgText;\n      if (this.directives[message.referenceId]) {\n        directive = this.directives[message.referenceId];\n      } else {\n        directive = preLoad(message.referenceId);\n      }\n      messages = directive.messages;\n      if (this.onlyUnique) {\n        angular.forEach(messages, function (msg) {\n          msgText = $sce.getTrustedHtml(msg.text);\n          if (message.text === msgText && message.severity === msg.severity && message.title === msg.title) {\n            found = true;\n          }\n        });\n        if (found) {\n          return;\n        }\n      }\n      message.text = $sce.trustAsHtml(String(message.text));\n      if (message.ttl && message.ttl !== -1) {\n        message.countdown = message.ttl / 1000;\n        message.promises = [];\n        message.close = false;\n        message.countdownFunction = function () {\n          if (message.countdown > 1) {\n            message.countdown--;\n            message.promises.push($timeout(message.countdownFunction, 1000));\n          } else {\n            message.countdown--;\n          }\n        };\n      }\n      if (angular.isDefined(directive.limitMessages)) {\n        var diff = messages.length - (directive.limitMessages - 1);\n        if (diff > 0) {\n          messages.splice(directive.limitMessages - 1, diff);\n        }\n      }\n      if (this.reverseOrder) {\n        messages.unshift(message);\n      } else {\n        messages.push(message);\n      }\n      if (typeof message.onopen === 'function') {\n        message.onopen();\n      }\n      if (message.ttl && message.ttl !== -1) {\n        var self = this;\n        message.promises.push($timeout(angular.bind(this, function () {\n          self.deleteMessage(message);\n        }), message.ttl));\n        message.promises.push($timeout(message.countdownFunction, 1000));\n      }\n      return message;\n    };\n    this.deleteMessage = function (message) {\n      var messages = this.getAllMessages(message.referenceId), index = messages.indexOf(message);\n      if (index > -1) {\n        messages[index].close = true;\n        messages.splice(index, 1);\n      }\n      if (typeof message.onclose === 'function') {\n        message.onclose();\n      }\n    };\n  }\n]);"],"sourceRoot":"/source/"}