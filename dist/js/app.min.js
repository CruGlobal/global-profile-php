(function () {
	'use strict';

	angular.module( 'globalProfile', [
		// Dependencies
		'ui.router',
		'globalProfile.common.settingsService',
		'globalProfile.api.measurements',
		'angular-growl',

		// States
		'globalProfile.states.selectMinistry',
		'globalProfile.states.profile.edit',
		'globalProfile.states.admin.add',
		'globalProfile.states.admin.edit',
		'globalProfile.states.admin.import'
	] );
})();

(function () {
	'use strict';

	angular.module( 'globalProfile.api.measurements', [
		// Dependencies
		'globalProfile.common.settingsService',
		'ngResource'
	] );

})();

(function () {
	'use strict';

	angular
		.module( 'globalProfile.states.admin', [
			'ui.router',
			'globalProfile.states.profile',
			'globalProfile.api.measurements'
		] )
		.config( ["$stateProvider", function ( $stateProvider ) {
			$stateProvider
				.state( 'admin', {
					parent:  'profile',
					url:     '/admin',
					resolve: {
						'requiresLeader': ["$q", "isLeader", function ( $q, isLeader ) {
							var deferred = $q.defer();
							if ( isLeader ) deferred.resolve(); else deferred.reject( 'Not a Leader or Inherited Leader of the ministry.' );
							return deferred.promise;
						}],
						'people':         ["$log", "ministry", "Profile", function ( $log, ministry, Profile ) {
							return Profile.query( {ministry_id: ministry.ministry_id} ).$promise;
						}]
					},
					views:   {
						'@app':          {
							templateUrl: 'js/states/admin/admin.html'
						},
						'sidebar@admin': {
							templateUrl: 'js/states/admin/sidebar.html',
							controller:  'SidebarController'
						}
					}
				} )
		}] );

})();

(function () {
	'use strict';

	angular
		.module( 'globalProfile.states.app', [
			// Dependencies
			'ui.router',
			'globalProfile.api.measurements'
		] )
		.config( ["$stateProvider", "$urlRouterProvider", function ( $stateProvider, $urlRouterProvider ) {

			$urlRouterProvider.otherwise( '/' );

			$stateProvider.state( 'app', {
				abstract:    true,
				url:         '/',
				templateUrl: 'js/states/app/app.html',
				resolve:     {
					'session':    ["$log", "Session", function ( $log, Session ) {
						return Session.getSession();
					}],
					'systems':    ["$log", "session", "Ministries", function ( $log, session, Ministries ) {
						return Ministries.systems().$promise;
					}],
					'ministries': ["$log", "session", "Ministries", function ( $log, session, Ministries ) {
						return Ministries.whq().$promise;
					}],
					'languages':  ["$log", "session", "Languages", function ( $log, session, Languages ) {
						return Languages.languages();
					}],
					'countries':  ["$log", "session", "Countries", function ( $log, session, Countries ) {
						return Countries.countries();
					}]
				}
			} );
		}] );

})();

(function () {
	'use strict';

	angular
		.module( 'globalProfile.states.profile', [
			'ui.router',
			'globalProfile.states.app',
			'globalProfile.api.measurements'
		] )
		.config( ["$stateProvider", function ( $stateProvider ) {
			$stateProvider
				.state( 'profile', {
					parent:   'app',
					abstract: true,
					url:      '{min_code}',
					resolve:  {
						'ministry': ["$log", "$q", "$state", "$stateParams", "session", "systems", function ( $log, $q, $state, $stateParams, session, systems ) {
							var deferred = $q.defer();
							// Unknown min_code
							if ( angular.isUndefined( $stateParams.min_code ) || $stateParams.min_code === '' ) {
								$state.transitionTo( 'selectMinistry' );
								deferred.reject();
							}
							else {
								var ministry = _.findWhere( systems, {min_code: $stateParams.min_code} );

								// Ministry is not a valid Global Profile system
								if ( angular.isUndefined( ministry ) ) {
									$state.transitionTo( 'selectMinistry' );
									deferred.reject();
								}
								else {
									deferred.resolve( ministry );
								}
							}
							return deferred.promise;
						}],
						'isLeader': ["$log", "session", "ministry", function ( $log, session, ministry ) {
							var flatten = function ( a, prop ) {
								var items = [];
								angular.forEach( a, function ( item ) {
									items.push( item );
									if ( item.hasOwnProperty( prop ) && angular.isArray( item[prop] ) ) {
										items = items.concat( flatten( item[prop], prop ) );
									}
								} );
								return items;
							};
							var assignments = _.where( flatten( session.assignments, 'sub_ministries' ), {ministry_id: ministry.ministry_id} ),
								roles       = _.pluck( assignments, 'team_role' );
							return _.contains( roles, 'leader' )
								|| _.contains( roles, 'inherited_leader' )
								|| _.contains( roles, 'admin' )
								|| _.contains( roles, 'inherited_admin' );
						}]
					},
					views:    {
						'title@app': {
							controller: ["$scope", "ministry", function ( $scope, ministry ) {
								$scope.ministry = ministry;
							}],
							template:   '{{ministry.name}}'
						}
					}
				} );
		}] );

})();

(function () {
	'use strict';

	angular
		.module( 'globalProfile.states.selectMinistry', [
			'ui.router',
			'ui.bootstrap',
			'globalProfile.states.app'
		] )
		.config( ["$stateProvider", function ( $stateProvider ) {
			$stateProvider
				.state( 'selectMinistry', {
					parent:      'app',
					url:         '',
					templateUrl: 'js/states/select-ministry/select-ministry.html',
					controller:  'SelectMinistryController'
				} );
		}] );
})();

(function () {
	'use strict';

	angular
		.module( 'globalProfile.states.admin.add', [
			'ui.router',
			'ui.bootstrap.modal',
			'globalProfile.states.admin',
			'globalProfile.api.measurements',
			'globalProfile.components.profileFormDirective'
		] )
		.config( ["$stateProvider", function ( $stateProvider ) {
			$stateProvider
				.state( 'admin.add', {
					url:     '/add',
					resolve: {
						'profile': ["$log", "Profile", function ( $log, Profile ) {
							return Profile.defaultProfile();
						}]
					},
					views:   {
						'content@admin': {
							templateUrl: 'js/states/admin/add/add.html',
							controller:  'AddProfileController'
						}
					}
				} );
		}] );

})();

(function () {
	'use strict';

	angular
		.module( 'globalProfile.states.admin.edit', [
			'ui.router',
			'ui.bootstrap.modal',
			'globalProfile.states.admin',
			'globalProfile.components.profileFormDirective'
		] )
		.config( ["$stateProvider", function ( $stateProvider ) {
			$stateProvider
				.state( 'admin.edit', {
					url:     '/{person_ID:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}}',
					resolve: {
						// person_ID must be in the list of people
						'profile':    ["$log", "$q", "$stateParams", "people", function ( $log, $q, $stateParams, people ) {
							var deferred = $q.defer();
							if ( angular.isUndefined( $stateParams.person_ID ) || $stateParams.person_ID === '' ) {
								deferred.reject( 'Missing or Invalid person_id' );
							}
							else {
								var profile = _.findWhere( people, {person_id: $stateParams.person_ID} );
								if ( angular.isUndefined( profile ) ) {
									$state.go( 'admin.new' );
									deferred.reject();
								}
								else {
									deferred.resolve( profile );
								}
							}
							return deferred.promise;
						}]
					},
					views:   {
						'content@admin': {
							templateUrl: 'js/states/admin/edit/edit.html',
							controller:  'EditProfileController'
						}
					}
				} );
		}] );

})();

(function () {
	'use strict';

	angular
		.module( 'globalProfile.states.admin.import', [
			'ui.router',
			'globalProfile.states.admin',
			'globalProfile.common.fileReaderDirective',
			'globalProfile.common.offsetFilter'
		] )
		.config( ["$stateProvider", function ( $stateProvider ) {
			$stateProvider
				.state( 'admin.import', {
					url:     '/import',
					resolve: {},
					views:   {
						'@app': {
							templateUrl: 'js/states/admin/import/import.html',
							controller:  'ImportCSVController'
						}
					}
				} );
		}] );

})();

(function () {
	'use strict';

	angular
		.module( 'globalProfile.states.profile.edit', [
			'ui.router',
			'ui.bootstrap.modal',
			'globalProfile.states.profile',
			'globalProfile.api.measurements',
			'globalProfile.components.profileFormDirective'
		] )
		.config( ["$stateProvider", function ( $stateProvider ) {
			$stateProvider
				.state( 'edit', {
					parent:  'profile',
					url:     '',
					resolve: {
						'profile': ["$log", "$q", "session", "ministry", "Profile", function ( $log, $q, session, ministry, Profile ) {
							var deferred = $q.defer();
							Profile
								.get( {
									person_id:   session.user.person_id,
									ministry_id: ministry.ministry_id
								}, function ( profile ) {
									deferred.resolve( profile );
								}, function ( response ) {
									// Profile not found for current user
									if ( response.status === 404 ) {
										// Build new profile based on session.user attributes
										var user = session.user,
											props = ['key_username', 'key_guid', 'first_name', 'last_name', 'person_id'],
											profile = Profile.defaultProfile();
										angular.forEach( props, function ( property ) {
											// Change key_username to email
											this[property === 'key_username' ? 'email' : property] = user.hasOwnProperty( property ) ? user[property] : '';
										}, profile );
										deferred.resolve( profile );
									}
									else {
										deferred.reject( response );
									}
								} );
							return deferred.promise;
						}]
					},
					views:   {
						'@app': {
							templateUrl: 'js/states/profile/edit/edit.html',
							controller:  'EditPersonalProfileController'
						},
						'navigation@app' : {
							controller: ["$scope", "isLeader", function( $scope, isLeader ) {
								$scope.isLeader = isLeader;
							}],
							template: '<button type="button" class="btn btn-sm btn-danger" ng-if="isLeader" ui-sref="admin">Administrator</button>'
						}
					}
				} )

		}] );
})();

(function ( module ) {
	'use strict';

	module.config( ["$locationProvider", function ( $locationProvider ) {
		$locationProvider.html5Mode( true );
	}] );

	// Initialize Application Settings
	module.config( ["SettingsProvider", function ( SettingsProvider ) {
		SettingsProvider.setConfig( window.globalProfile.config );
	}] );

	module.config( ["$logProvider", "SettingsProvider", function ( $logProvider, SettingsProvider ) {
		$logProvider.debugEnabled( SettingsProvider.isDebug() );
	}] );

	// Configure HTTP interceptors
	module.config( ["$httpProvider", function ( $httpProvider ) {
		$httpProvider.interceptors.push( 'Session' );
	}] );

	// Configure Growl
	module.config( ["growlProvider", function ( growlProvider ) {
		growlProvider.globalPosition( 'top-right' );
		growlProvider.globalDisableCountDown( true );
		growlProvider.globalTimeToLive( {success: 10000, error: -1, warning: -1, info: 10000} );
	}] );

})( angular.module( 'globalProfile' ) );

(function ( module ) {
	'use strict';

	module
		.directive( 'fileReader', [function () {
			return {
				restrict: 'A',
				scope:    {
					fileReader: '='
				},
				link:     function ( $scope, $element, $attrs ) {
					$element.on( 'change', function ( event ) {
						$scope.$apply( function () {
							$scope.fileReader = event.target.files[0];
						} );
					} );
				}
			}
		}] );

})( angular.module( 'globalProfile.common.fileReaderDirective', [] ) );

(function ( module ) {
	'use strict';

	module
		.filter( 'offset', function () {
			return function ( input, start ) {
				if ( angular.isUndefined( input ) ) return;
				start = parseInt( start, 10 );
				return input.slice( start );
			};
		} );

})( angular.module( 'globalProfile.common.offsetFilter', [] ) );

(function ( module ) {
	'use strict';

	module.provider( 'Settings', function () {
		var config = {};

		this.setConfig = function ( c ) {
			config = c;
		};

		this.isDebug = function () {
			return config.environment === 'development';
		};

		function apiUrl( base, path ) {
			if ( typeof path === 'undefined' ) return base;
			return ( path.indexOf( '/' ) === 0 )
				? base + path
				: base + '/' + path;
		}

		this.$get = function () {
			return {
				api:    {
					measurements: function ( path ) {
						return apiUrl( config.api.measurements, path );
					}
				},
				ticket: config.ticket
			};
		}
	} );
})( angular.module( 'globalProfile.common.settingsService', [] ) );

(function ( angular ) {
	'use strict';
	angular.module( 'globalProfile.directives', [] );
})( angular );

(function ( module ) {
	'use strict';

	module.factory( 'Countries', ["$log", "$http", "Settings", function ( $log, $http, Settings ) {
		return {
			countries: function () {
				return $http.get( Settings.api.measurements( '/iso_countries' ), {
					cache: true
				} ).then( function ( response ) {
					if ( angular.isArray( response.data ) ) {
						return response.data;
					}
					var countries = [];
					angular.forEach( response.data, function ( value, key ) {
						this.push( {
							iso3: key,
							name: value
						} );
					}, countries );
					return countries;
				} );
			}
		};
	}] );
})( angular.module( 'globalProfile.api.measurements' ) );

(function ( module ) {
	'use strict';

	module.factory( 'Languages', ["$log", "$http", "Settings", function ( $log, $http, Settings ) {
		return {
			languages: function () {
				return $http.get( Settings.api.measurements( '/languages' ), {
					cache: true
				} ).then( function ( response ) {
					return response.data;
				} );
			}
		};
	}] );
})( angular.module( 'globalProfile.api.measurements' ) );

(function ( module ) {
	'use strict';

	module.factory( 'Ministries', ["$log", "$resource", "Settings", function ( $log, $resource, Settings ) {
		return $resource( Settings.api.measurements( '/ministries/:ministry_id' ), {}, {
			'systems': {method: 'GET', isArray: true, params: {global_profile_only: 'true'}, cache: true},
			'whq':     {method: 'GET', isArray: true, params: {whq_only: 'true', show_inactive: 'true'}, cache: true},
			'query':   {method: 'GET', isArray: true}
		} );
	}] );

})( angular.module( 'globalProfile.api.measurements' ) );

(function ( module ) {
	'use strict';

	module.factory( 'Profile', ["$log", "$resource", "Settings", function ( $log, $resource, Settings ) {
		var normalizeProfile = function ( profile ) {
				// Language
				if ( angular.isUndefined( profile.language ) ) {
					profile.language = [];
				} else if ( angular.isString( profile.language ) ) {
					profile.language = [profile.language];
				}

				//Assignments
				if ( angular.isUndefined( profile.assignments ) ) {
					profile.assignments = [{}];
				}

				return profile;
			},
			normalizeProfileRequest = function ( profile, headersGetter ) {
				angular.forEach( profile, function ( value, key ) {
					if ( angular.isUndefined( value ) || value === null ) {
						delete profile[key];
					}
				} );
				return angular.isObject( profile ) ? angular.toJson( profile ) : profile;
			},
			api = $resource( Settings.api.measurements( '/people/:person_id' ), {
				person_id:   '@person_id',
				ministry_id: '@ministry_id'
			}, {
				get:    {
					method: 'GET', interceptor: {
						response: function ( response ) {
							return normalizeProfile( response.resource );
						}
					}
				},
				query:  {
					method: 'GET', isArray: true, interceptor: {
						response: function ( response ) {
							return angular.forEach( response.resource, normalizeProfile );
						}
					}
				},
				create: {method: 'POST', transformRequest: normalizeProfileRequest},
				update: {method: 'PUT', transformRequest: normalizeProfileRequest}
			} );
		api.defaultProfile = function () {
			return normalizeProfile( {
				is_secure: false
			} );
		};
		return api;
	}] );
})( angular.module( 'globalProfile.api.measurements' ) );

(function ( module ) {
	'use strict';

	module.factory( 'Session', ["$injector", "$q", "$log", "Settings", function ( $injector, $q, $log, Settings ) {
		var token,
			session;

		return {
			getSession:    function () {
				var deferred = $q.defer();
				if ( angular.isDefined( session ) ) {
					deferred.resolve( session );
				}
				else {
					$injector.get( '$http' )
						.get( Settings.api.measurements( '/token' ), {params: {st: Settings.ticket}} )
						.then( function ( response ) {
							token = response.data.session_ticket;
							session = response.data;
							deferred.resolve( session );
						}, function ( reason ) {
							deferred.reject( reason );
						} );
				}
				return deferred.promise;
			},
			request:       function ( config ) {
				if ( config.url.indexOf( Settings.api.measurements() ) === 0 ) {
					$log.debug( 'Measurements API Request', config );

					// Enable HTTP Credentials for measurements API requests
					config.withCredentials = true;

					// Add token to request as Authorization Bearer
					if ( !angular.isUndefined( token ) ) {
						config.headers['Authorization'] = 'Bearer ' + token;
					}
				}
				return config;
			},
			responseError: function ( response ) {
				return $q.reject( response );
			}
		}
	}] );
})( angular.module( 'globalProfile.api.measurements' ) );

(function ( module ) {
	'use strict';

	module
		.directive( 'profileForm', ['$log', 'Languages', 'Countries', 'Ministries', function ( $log, Languages, Countries, Ministries ) {
			var defaultRequiredFields = [
				'email',
				'last_name',
				'first_name',
				'gender',
				'birth_date',
				'marital_status',
				'country_of_residence',
				'language1',
				'organizational_status',
				'funding_source',
				'date_joined_staff',
				'ministry_of_employment',
				'assignment_ministry',
				'mcc',
				'position_role',
				'scope'
			];
			return {
				restrict:    'E',
				require:     ['^ngModel'],
				scope:       {
					profile:        '=ngModel',
					requiredFields: '=?profileRequiredFields',
					ministries:     '=profileMinistries',
					languages:      '=profileLanguages',
					countries:      '=profileCountries'
				},
				templateUrl: 'js/components/profile-form/profile-form.html',
				transclude:  true,
				link:        function ( $scope, $element, $attrs ) {
					$scope.showHelp = angular.isUndefined( $attrs.profileShowHelp ) ? true : $scope.$eval( $attrs.profileShowHelp ) === true;
					$scope.showPrivacy = $scope.$eval( $attrs.profileShowPrivacy ) === true;
					$scope.showLeftStaff = $scope.$eval( $attrs.profileShowLeftStaff ) === true;

					if ( angular.isUndefined( $attrs.profileRequiredFields ) ) {
						$scope.requiredFields = defaultRequiredFields;
					}

					$scope.isRequired = function ( name ) {
						return $scope.requiredFields.indexOf( name ) > -1;
					};

					$scope.$watch( 'profile.organizational_status', function ( organizational_status, oldVal ) {
						if ( angular.isUndefined( organizational_status ) || organizational_status == 'Volunteer' || organizational_status == 'Other' ) {
							$scope.showStaffDates = false;
							$scope.requiredFields = _.without( $scope.requiredFields, 'date_joined_staff' );
						}
						else {
							$scope.showStaffDates = true;
							if ( _.indexOf( $scope.requiredFields, 'date_joined_staff' ) === -1 ) {
								$scope.requiredFields.push( 'date_joined_staff' );
							}
						}
					} );

					$scope.$watch( 'profile.organizational_status', function ( organizational_status, oldVal ) {
						if ( $scope.profile.funding_source === 'Other' ) return;
						if ( angular.isUndefined( organizational_status ) || organizational_status == 'Volunteer' ) {
							$scope.showEmploymentMinistry = false;
							$scope.requiredFields = _.without( $scope.requiredFields, 'ministry_of_employment' );
						}
						else {
							$scope.showEmploymentMinistry = true;
							if ( _.indexOf( $scope.requiredFields, 'ministry_of_employment' ) === -1 ) {
								$scope.requiredFields.push( 'ministry_of_employment' );
							}
						}
					} );

					$scope.$watch( 'profile.funding_source', function ( funding_source, oldVal ) {
						if ( $scope.profile.organizational_status === 'Volunteer' ) return;
						if ( angular.isUndefined( funding_source ) || funding_source == 'Other' ) {
							$scope.showEmploymentMinistry = false;
							$scope.requiredFields = _.without( $scope.requiredFields, 'ministry_of_employment' );
						}
						else {
							$scope.showEmploymentMinistry = true;
							if ( _.indexOf( $scope.requiredFields, 'ministry_of_employment' ) === -1 ) {
								$scope.requiredFields.push( 'ministry_of_employment' );
							}
						}
					} );

					$scope.formatMinistryLabel = function ( ministry_id ) {
						for ( var i = 0; i < $scope.ministries.length; i++ ) {
							if ( ministry_id === $scope.ministries[i].ministry_id ) {
								return (angular.isUndefined( $scope.ministries[i].area_code ) ? 'GLBL' : $scope.ministries[i].area_code) + ' — ' + $scope.ministries[i].name;
							}
						}
					};

					$scope.formatCountryLabel = function ( iso3 ) {
						for ( var i = 0; i < $scope.countries.length; i++ ) {
							if ( iso3 === $scope.countries[i].iso3 ) {
								return $scope.countries[i].name;
							}
						}
					};
				}
			}
		}] );

})( angular.module( 'globalProfile.components.profileFormDirective', [
	'globalProfile.api.measurements'
] ) );

(function ( module ) {
	'use strict';

	module
		.controller( 'SidebarController', ["$log", "$scope", "$state", "people", function ( $log, $scope, $state, people ) {
			$scope.$state = $state;
			$scope.people = people;
			$scope.filterText = '';

			$scope.clearFilter = function () {
				$scope.filterText = '';
			}
		}] );

})( angular.module( 'globalProfile.states.admin' ) );

(function ( module ) {
	'use strict';

	module.controller( 'SelectMinistryController', ["$log", "$scope", "$state", "session", "systems", function ( $log, $scope, $state, session, systems ) {
		function flatten( a, prop ) {
			var items = [];
			angular.forEach( a, function ( item ) {
				items.push( item );
				if ( item.hasOwnProperty( prop ) && angular.isArray( item[prop] ) ) {
					items = items.concat( flatten( item[prop], prop ) );
				}
			} );
			return items;
		}

		var assignments = flatten( session.assignments, 'sub_ministries' );

		$scope.$state = $state;
		$scope.ministries = systems;

		$scope.isLeader = function ( ministry_id ) {
			var roles = _.pluck( _.where( assignments, {ministry_id: ministry_id} ), 'team_role' );
			return _.contains( roles, 'leader' ) || _.contains( roles, 'inherited_leader' );
		};
	}] );

})( angular.module( 'globalProfile.states.selectMinistry' ) );

(function ( module ) {
	'use strict';

	module
		.controller( 'AddProfileController', ["$log", "$scope", "$modal", "$state", "profile", "ministry", "Profile", "ministries", "countries", "languages", "growl", function ( $log, $scope, $modal, $state, profile, ministry, Profile, ministries, countries, languages, growl ) {
			$scope.$state = $state;
			$scope.requiredFields = [
				'email',
				'last_name',
				'first_name',
				'gender',
				'birth_date',
				'marital_status',
				'country_of_residence',
				'language1',
				'organizational_status',
				'funding_source',
				'date_joined_staff',
				'ministry_of_employment',
				'assignment_ministry',
				'mcc',
				'position_role',
				'scope'
			];
			$scope.profile = angular.copy( profile );
			$scope.ministries = ministries;
			$scope.countries = countries;
			$scope.languages = languages;

			$scope.resetForm = function () {
				$scope.profile = angular.copy( profile );
			};

			$scope.saveProfile = function () {
				Profile.create( {ministry_id: ministry.ministry_id}, $scope.profile, function ( result ) {
					$scope.profileForm.$setPristine();

					growl.success( 'Profile successfully saved.' );

					$state.go( 'admin.edit', {person_ID: result.person_id}, {reload: true} );
				}, function () {
					$modal.open( {
						templateUrl: 'js/states/admin/error.modal.html',
						size:        'sm',
						controller:  ["$scope", "$modalInstance", function ( $scope, $modalInstance ) {
							$scope.ok = function () {
								$modalInstance.close();
							};
						}]
					} );
				} );
			};

			$scope.$on( '$stateChangeStart', function ( event, toState, toParams, fromState, fromParams ) {
				if ( $scope.profileForm.$dirty ) {
					event.preventDefault();
					$modal.open( {
						templateUrl: 'js/states/admin/unsaved.modal.html',
						controller:  ["$scope", "$modalInstance", function ( $scope, $modalInstance ) {
							$scope.save = function () {
								$modalInstance.close();
							};

							$scope.cancel = function () {
								$modalInstance.dismiss( 'discard' );
							};
						}]
					} ).result.then( function () {
						}, function ( action ) {
							if ( action === 'discard' ) {
								$scope.profileForm.$setPristine();
								$state.transitionTo( toState, toParams );
							}
						} );
				}
			} );

		}] );

})( angular.module( 'globalProfile.states.admin.add' ) );

(function ( module ) {
	'use strict';

	module
		.controller( 'EditProfileController', ["$log", "$scope", "$state", "profile", "ministry", "Profile", "$modal", "ministries", "countries", "languages", "growl", function ( $log, $scope, $state, profile, ministry, Profile, $modal, ministries, countries, languages, growl ) {
			$scope.$state = $state;
			$scope.requiredFields = [
				'email',
				'last_name',
				'first_name',
				'gender',
				'birth_date',
				'marital_status',
				'country_of_residence',
				'language1',
				'organizational_status',
				'funding_source',
				'date_joined_staff',
				'ministry_of_employment',
				'assignment_ministry',
				'mcc',
				'position_role',
				'scope'
			];
			$scope.profile = angular.copy( profile );
			$scope.ministries = ministries;
			$scope.countries = countries;
			$scope.languages = languages;

			$scope.resetForm = function () {
				$scope.profile = angular.copy( profile );
				$scope.profileForm.$setPristine();
			};

			$scope.saveChanges = function () {
				Profile.update( {ministry_id: ministry.ministry_id}, $scope.profile, function ( result ) {
					// Success
					growl.success( 'Profile successfully saved.' );
					profile = result;
					$scope.profile = angular.copy( profile );
					$scope.profileForm.$setPristine();
				}, function () {
					// Error
					$modal.open( {
						templateUrl: 'js/states/admin/error.modal.html',
						size:        'sm',
						controller:  ["$scope", "$modalInstance", function ( $scope, $modalInstance ) {
							$scope.ok = function () {
								$modalInstance.close();
							};
						}]
					} );
				} );
			};

			$scope.$on( '$stateChangeStart', function ( event, toState, toParams, fromState, fromParams ) {
				if ( $scope.profileForm.$dirty ) {
					event.preventDefault();
					$modal.open( {
						templateUrl: 'js/states/admin/unsaved.modal.html',
						controller:  ["$scope", "$modalInstance", function ( $scope, $modalInstance ) {
							$scope.save = function () {
								$modalInstance.close();
							};

							$scope.cancel = function () {
								$modalInstance.dismiss( 'discard' );
							};
						}]
					} ).result.then( function () {
						}, function ( action ) {
							if ( action === 'discard' ) {
								$scope.profileForm.$setPristine();
								$state.transitionTo( toState, toParams );
							}
						} );
				}
			} );
		}] );

})( angular.module( 'globalProfile.states.admin.edit' ) );

(function ( module ) {
	'use strict';

	module
		.controller( 'ImportCSVController', ["$log", "$scope", "$state", "ministry", "Profile", function ( $log, $scope, $state, ministry, Profile ) {
			$scope.$state = $state;
			$scope.hasHeader = true;
			$scope.columns = [];
			$scope.pager = {
				page:  1,
				begin: 0
			};

			$scope.browse = function () {
				document.getElementById( 'fileBrowser' ).click();
			};

			$scope.$watch( 'file', function ( file ) {
				if ( angular.isUndefined( file ) ) return;
				parseCSV();
			} );

			$scope.$watch( 'hasHeader', function ( hasHeader ) {
				parseCSV();
			} );

			$scope.$watch( 'pager.page', function ( page ) {
				if ( angular.isUndefined( $scope.csv ) ) return;
				$scope.pager.begin = (page - 1) * 10;
			} );

			function parseCSV() {
				if ( angular.isUndefined( $scope.file ) ) return;
				if ( angular.isUndefined( $scope.hasHeader ) ) return;

				Papa.parse( $scope.file, {
					header:   false, // We remove first row manually if hasHeader is true
					complete: function ( results, file ) {
						var columns = [];
						$scope.$apply( function () {
							if ( $scope.hasHeader ) {
								$scope.headerRow = results.data.shift();
								for ( var i = 0; i < $scope.headerRow.length; i++ )
									columns.push( {index: i} );
							} else {
								delete $scope.headerRow;
								for ( var i = 0; i < results.data[0].length; i++ )
									columns.push( {index: i} );
							}
							$scope.columns = columns;
							$scope.csv = results;
						} );
					}
				} )
			}
		}] );

})( angular.module( 'globalProfile.states.admin.import' ) );

(function ( module ) {
	'use strict';

	module.controller( 'EditPersonalProfileController', ["$log", "$scope", "$modal", "session", "ministry", "profile", "Profile", "ministries", "countries", "languages", "growl", function ( $log, $scope, $modal, session, ministry, profile, Profile, ministries, countries, languages, growl ) {
		$scope.profile = angular.copy( profile );
		$scope.ministries = ministries;
		$scope.countries = countries;
		$scope.languages = languages;

		$scope.resetForm = function () {
			$scope.profile = angular.copy( profile );
			$scope.profileForm.$setPristine();
		};

		$scope.saveChanges = function () {
			var method = angular.isUndefined( profile.id ) ? 'create' : 'update';
			Profile[method]( {ministry_id: ministry.ministry_id}, $scope.profile, function ( response ) {
				// Success
				growl.success( 'Profile successfully saved.' );
				profile = response;
				$scope.profile = angular.copy( profile );
				$scope.profileForm.$setPristine();
			}, function() {
				// Error
				$modal.open( {
					templateUrl: 'js/states/admin/error.modal.html',
					size:        'sm',
					controller:  ["$scope", "$modalInstance", function ( $scope, $modalInstance ) {
						$scope.ok = function () {
							$modalInstance.close();
						};
					}]
				} );
			} );
		};
	}] );
})( angular.module( 'globalProfile.states.profile.edit' ) );

//# sourceMappingURL=app.min.js.map